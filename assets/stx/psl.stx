#meta GRAMMAR ${ $}
#meta MAPPING ${ $}

GRAMMAR ${
    IdentRef        ::=     $Ident ;
    Complex         ::=     $Int `+` $Int `i` | $Real `+` $Real `i` ;
    Value           ::=     ( $Int | $Real | Complex ) [ $Unit ] ;
    FormatStr       ::=     `f` $String ;
    Literal         ::=     Value | $String | FormatStr
                            | `null` | `true` | `false` ;
    SepMark         ::=     { $LineEnd } ;

    Type            ::=     InnerType | IdentRef ;
    NullableType    ::=     Type [ `?` ] ;
    InnerType       ::=     `number` | `string` | `bool` | `functor` | `block`
                            | NumberType | StructType ;
    ScalarType      ::=     `int` | `real` | `complex` ;
    VectorType      ::=     `array` [ `<` ScalarType `>` ] [ `[` $Int `]` ]
                            | `matrix` [ `<` ScalarType `>` ] { `[` $Int `]` } ;
    NumberType      ::=     ScalarType | VectorType ;
    StructType      ::=     `list` [ `<` NullableType { `,` NullableType } `>` ] [ `[` $Int `]` ]
                            | `dict` [ `<` Type `,` NullableType `>` ] ;
    TypeDef         ::=     `type` IdentRef [ `=` ] ( Type | TypePack ) StmtEnd ;

    FunctorRef      ::=     IdentRef [ SuperList ] ;
    EntityRef       ::=     IdentRef { `[` ( $Int | IdentRef ) `]` } ;
    Entity          ::=     ( EntityRef | FunctorRef | Literal | ListPack | DictPack ) ;
    ChainUnit       ::=     Entity | FuncCall ;
    EntityChain     ::=     ChainUnit { ChainUnit } ;
    EntityExpr      ::=     EntityChain [ `as` Type ] ;

    KeyValExpr      ::=     IdentRef `=` EntityExpr ;
    KeyValDecl      ::=     IdentRef `:` NullableType [ `=` EntityExpr ] ;
    ListPack        ::=     `[` SepMark [ EntityExpr { `,` SepMark EntityExpr } ] SepMark `]` ;
    ListUnpack      ::=     `[` SepMark [ IdentRef { `,` SepMark IdentRef } ] SepMark `]` ;
    DictPack        ::=     `{` SepMark [ KeyValExpr { `,` SepMark KeyValExpr } ] SepMark `}` ;
    DictUnpack      ::=     `{` SepMark [ IdentRef { `,` SepMark IdentRef } ] SepMark `}` ;
    TypePack        ::=     `{` SepMark [ KeyValDecl { `,` SepMark KeyValDecl } ] SepMark `}` ;
    StmtPack        ::=     `{` SepMark [ StmtList ] SepMark `}` ;

    Annotations     ::=     { `@` EntityRef $LineEnd } ;
    Modifiers       ::=     { `atomic` | `inner` } ;
    SuperParam      ::=     EntityExpr | KeyValExpr ;
    SuperList       ::=     `<` SepMark SuperParam { `,` SepMark SuperParam } SepMark `>` ;
    SuperDef        ::=     `<` SepMark KeyValDecl { `,` SepMark KeyValDecl } SepMark `>` ;
    FuncType        ::=     NullableType | `void` | `any` ;
    FuncTypeMark    ::=     FuncType [ `->` FuncType ] ;
    FuncDef         ::=     Annotations
                            Modifiers `func` IdentRef [ SuperDef ]
                            `:` FuncTypeMark [ `=` ] [ $LineEnd ]
                            StmtPack StmtEnd ;
    FuncCall        ::=     FuncCall ( `.` | `->` ) Entity 
                            | FunctorRef `(` SepMark EntityExpr SepMark `)`
                            | Entity ;

    Carrier         ::=     EntityRef | ListUnpack | DictUnpack ;
    StmtEnd         ::=     SepMark | `;` ;
    UseStmt         ::=     `use` Carrier [ `=` ] EntityExpr StmtEnd ;
    LetStmt         ::=     `let` Carrier [ `:` Type ] [ `=` ] EntityExpr StmtEnd ;
    GetStmt         ::=     `get` IdentRef StmtEnd ;
    RetStmt         ::=     `ret` [ EntityExpr ] StmtEnd ;
    ExprStmt        ::=     EntityExpr StmtEnd ;
    Stmt            ::=     LetStmt | UseStmt
                            | FuncDef | TypeDef
                            | GetStmt | RetStmt
                            | ExprStmt ;
    StmtList        ::=     { SepMark Stmt } ;

    Program*        ::=     StmtList ;
$}

MAPPING ${
    $Ident     -->     @IDENTIFIER ;
    $Unit      -->     @UNIT ;
    $Int       -->     @INTEGER ;
    $Real      -->     @REAL ;
    $String    -->     @STRING ;
    $LineEnd   -->     @LINE_END ;
$}