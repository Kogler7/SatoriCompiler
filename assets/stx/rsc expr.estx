/**
* Extended Syntax Definition for the Reduced Language for Satori Compiler
* (c) 2023 Satori Compiler Project, Beijing Jiaotong University
*/

GRAMMAR ${
    Program*    ::=     { VarDecl | FuncDef }
                    ;
    VarDecl     ::=     `var` VarType VarDef { `,` VarDef } `;`
                    ;
    VarType     ::=     `int` | `real` | `bool` | `str`
                    ;
    VarDef      ::=     $Ident { `[` $Integer `]` } [ `=` Expr ]
                    ;
    FuncType    ::=     `int` | `real` | `bool` | `str` | `void`
                    ;
    FuncDef     ::=     `func` FuncType $Ident `(` [ ParamList ] `)` Block
                    ;
    Stmt        ::=     LVal `=` Expr `;`
                    |   `if` `(` BoolExpr `)` Stmt
                    |   `while` `(` BoolExpr `)` Stmt
                    |   `for` `(` Expr `;` BoolExpr `;` Expr `)` Stmt
                    |   `break` `;`
                    |   `continue` `;`
                    |   `print` Expr `;`
                    |   `return` [ Expr ] `;`
                    |   [ Expr ] `;`
                    |   Block
                    ;
    Block       ::=     `{` { BlockItem } `}`
                    ;
    BlockItem   ::=     VarDecl | Stmt
                    ;
    UnaryExpr   ::=     ( `+` | `-` | `!` ) UnaryExpr
                    |   Factor
                    ;
    MulExpr     ::=     MulExpr ( `*` | `/` ) UnaryExpr
                    |   UnaryExpr
                    ;
    Expr        ::=     Expr ( `+` | `-` ) MulExpr
                    |   MulExpr
                    ;
    BoolExpr    ::=     OrExpr
                    ;
    RelExpr     ::=     Expr ( `<` | `<=` | `>` | `>=` ) Expr
                    ;
    EqExpr      ::=     EqExpr ( `==` | `!=` ) RelExpr
                    |   RelExpr
                    ;
    AndExpr     ::=     AndExpr `&&` EqExpr
                    |   EqExpr
                    ;
    OrExpr      ::=     OrExpr `||` AndExpr
                    |   AndExpr
                    ;
    Factor      ::=     LVal
                    |   FuncCall
                    |   `(` Expr `)`
                    |   Number
                    |   $String
                    |   `true`
                    |   `false`
                    ;
    Number      ::=     $Integer | $Real
                    ;
    FuncCall    ::=     $Ident `(` [ ArgList ] `)`
                    ;
    ArgList     ::=     Expr { `,` Expr }
                    ;
    ParamList   ::=     Param { `,` Param }
                    ;
    Param       ::=     Type $Ident
                    ;
    LVal        ::=     $Ident { `[` Expr `]` }
                    ;
$}

MAPPING ${
    $Ident     -->     @IDENTIFIER ;
    $Integer   -->     @INTEGER ;
    $Real      -->     @REAL ;
    $String    -->     @STRING ;
$}